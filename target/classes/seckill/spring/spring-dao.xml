<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
	<context:property-placeholder
		location="classpath:seckill/spring/jdbc.properties,classpath:seckill/spring/cache.properties" />
	<!-- 配置KILL数据库连接池 -->
	<bean id="dataSourceKill" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="maxActive" value="30" />
		<property name="maxIdle" value="10" />
		<property name="minIdle" value="5" />
	</bean>
	<!-- 配置mybaties sqlsessionfactorybean 对象 注意：如果不是用mybaties，则配置一个template并把source注入到模板即可 -->
	<bean id="sqlSessionFactoryKill" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceKill"></property>
		<!-- 配置Mybatis全局属性 mybatis-config.xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 扫描entity包，使用别名 me.seckill.entity.SecKill可以直接用SecKill，如果不加包扫描则要用全路径，有多个用；隔开 -->
		<property name="typeAliasesPackage" value="com.shitx.seckill.entity"></property>
		<!-- 扫描sql配置文件 mapper所在的xml文件， 当然也可以基于编程方式，这样mapper就在.java文件里了 -->
		<property name="mapperLocations" value="classpath:seckill/mapper/*.xml"></property>
	</bean>
	<!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中?????有没有必要啊，上面配置factory看起来就够了啊 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryKill"></property>
		<!-- 扫描特定的DAO接口包,为每个接口创建一个bean实现作为实际数据库操作的bean并注入容器 -->
		<property name="basePackage" value="com.shitx.seckill.dao"></property>
	</bean>

	<!-- 配置JEDIS -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="host" value="${redis.host}"></constructor-arg>
		<constructor-arg name="port" value="${redis.port}"></constructor-arg>
	</bean>
	<bean id="redisDao" class="com.shitx.seckill.dao.cache.RedisDao">
		<constructor-arg index="0" ref="jedisPool"></constructor-arg>
	</bean>


</beans>